{
  "name": "Instagram Booking Bot - Complete Flow (Supabase)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "instagram-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Instagram Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "instagram-dm-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract sender ID and message from Instagram webhook\nconst body = $input.item.json.body;\nconst senderId = body.entry?.[0]?.messaging?.[0]?.sender?.id;\nconst messageText = body.entry?.[0]?.messaging?.[0]?.message?.text;\nconst postback = body.entry?.[0]?.messaging?.[0]?.postback?.payload;\n\nreturn {\n  senderId: senderId,\n  messageText: messageText || '',\n  postback: postback || '',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse-webhook",
      "name": "Parse Instagram Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "conversation_states",
        "filterType": "manual",
        "matchType": "matchAll",
        "filtersUI": {
          "filterValues": [
            {
              "key": "sender_id",
              "condition": "equals",
              "value": "={{ $json.senderId }}"
            }
          ]
        },
        "options": {
          "queryName": "select"
        }
      },
      "id": "get-conversation-state",
      "name": "Get Conversation State from Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "jsCode": "// Initialize or parse conversation state\nconst senderId = $input.first().json.senderId;\nconst messageText = $input.first().json.messageText;\nconst postback = $input.first().json.postback;\nconst supabaseData = $input.all();\n\nlet state = {\n  stage: 'initial',\n  data: {}\n};\n\n// Check if conversation state exists in Supabase\nif (supabaseData.length > 1 && supabaseData[1].json) {\n  const dbState = supabaseData[1].json;\n  if (dbState.state_data) {\n    try {\n      state = JSON.parse(dbState.state_data);\n    } catch (e) {\n      state = { stage: 'initial', data: {} };\n    }\n  }\n}\n\n// Handle button postbacks\nif (postback) {\n  if (postback === 'btn_booking') {\n    state.stage = 'awaiting_name';\n  } else if (postback === 'btn_chat') {\n    state.stage = 'chat_mode';\n  } else if (postback.startsWith('slot_')) {\n    state.data.selectedSlot = postback;\n    state.stage = 'slot_selected';\n  } else if (postback === 'btn_active') {\n    state.stage = 'reminder_confirmed';\n  } else if (postback === 'btn_cancel') {\n    state.stage = 'cancel_appointment';\n  } else if (postback === 'btn_rebook') {\n    state.stage = 'awaiting_date';\n  }\n}\n\nreturn {\n  senderId: senderId,\n  messageText: messageText,\n  postback: postback,\n  currentStage: state.stage,\n  userData: state.data,\n  fullState: state\n};"
      },
      "id": "process-state",
      "name": "Process State",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "initial"
            }
          ]
        }
      },
      "id": "route-initial",
      "name": "Is Initial?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\"id\": \"{{ $json.senderId }}\"},\n  \"message\": {\n    \"text\": \"Hi! üëã Welcome to [Your Barbershop Name]!\\n\\nHow can we help you today?\",\n    \"quick_replies\": [\n      {\"content_type\": \"text\", \"title\": \"‚úÇÔ∏è Book Haircut\", \"payload\": \"btn_booking\"},\n      {\"content_type\": \"text\", \"title\": \"üí¨ Chat with Us\", \"payload\": \"btn_chat\"}\n    ]\n  }\n}",
        "options": {}
      },
      "id": "send-initial",
      "name": "Send Initial Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "operation": "upsert",
        "tableId": "conversation_states",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "sender_id",
              "fieldValue": "={{ $json.senderId }}"
            },
            {
              "fieldId": "state_data",
              "fieldValue": "={{ JSON.stringify({ stage: 'initial', data: {} }) }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        },
        "options": {
          "onConflict": "sender_id"
        }
      },
      "id": "save-initial-state",
      "name": "Save Initial State to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "chat_mode"
            }
          ]
        }
      },
      "id": "route-chat",
      "name": "Is Chat Mode?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\"id\": \"{{ $json.senderId }}\"},\n  \"message\": {\n    \"text\": \"Thank you for reaching out! üí¨\\n\\nPlease wait a moment while we connect you with one of our team members. An admin will respond to you shortly.\\n\\nIf you'd like to book an appointment instead, just send 'book' anytime.\"\n  }\n}",
        "options": {}
      },
      "id": "send-chat-response",
      "name": "Send Chat Mode Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1250, 350]
    },
    {
      "parameters": {
        "operation": "upsert",
        "tableId": "conversation_states",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "sender_id",
              "fieldValue": "={{ $json.senderId }}"
            },
            {
              "fieldId": "state_data",
              "fieldValue": "={{ JSON.stringify({ stage: 'chat_mode', data: {} }) }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        },
        "options": {
          "onConflict": "sender_id"
        }
      },
      "id": "save-chat-state",
      "name": "Save Chat State to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1450, 350]
    },
    {
      "parameters": {
        "fromEmail": "={{ $credentials.notificationEmail }}",
        "toEmail": "={{ $credentials.adminEmail }}",
        "subject": "New Instagram Chat Request",
        "emailType": "html",
        "message": "=<h2>New Chat Request from Instagram</h2>\n<p><strong>Instagram User ID:</strong> {{ $json.senderId }}</p>\n<p><strong>Time:</strong> {{ $now.toISO() }}</p>\n<p>Please check your Instagram DMs and respond to this customer.</p>",
        "options": {}
      },
      "id": "notify-admin",
      "name": "Notify Admin via Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1650, 350]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "awaiting_name"
            }
          ]
        }
      },
      "id": "route-name",
      "name": "Is Awaiting Name?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 500]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData || {};\nconst messageText = $input.first().json.messageText;\n\nuserData.name = messageText;\n\nreturn {\n  senderId: senderId,\n  message: \"Please provide your email address:\",\n  stage: 'awaiting_email',\n  userData: userData\n};"
      },
      "id": "process-name",
      "name": "Process Name",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 500]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "awaiting_email"
            }
          ]
        }
      },
      "id": "route-email",
      "name": "Is Awaiting Email?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 700]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData || {};\nconst messageText = $input.first().json.messageText;\n\n// Simple email validation\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nif (!emailRegex.test(messageText)) {\n  return {\n    senderId: senderId,\n    message: \"Please provide a valid email address:\",\n    stage: 'awaiting_email',\n    userData: userData,\n    valid: false\n  };\n}\n\nuserData.email = messageText.trim().toLowerCase();\n\nreturn {\n  senderId: senderId,\n  email: userData.email,\n  stage: 'check_email',\n  userData: userData,\n  valid: true\n};"
      },
      "id": "validate-email",
      "name": "Validate Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 700]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "lookup",
        "documentId": {
          "__rl": true,
          "value": "={{ $credentials.googleSheetsId }}",
          "mode": "list",
          "cachedResultName": "Clients Database"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "lookupColumn": "Email",
        "lookupValue": "={{ $json.email }}"
      },
      "id": "check-email-sheets",
      "name": "Check Email in Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1450, 700]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.Email }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "email-exists",
      "name": "Email Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1650, 700]
    },
    {
      "parameters": {
        "jsCode": "// Email exists - merge data from sheets\nconst senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData;\nconst sheetData = $input.first().json;\n\n// Update userData with existing info\nif (sheetData.Name) userData.name = sheetData.Name;\nif (sheetData.Phone) userData.phone = sheetData.Phone;\nif (sheetData.Instagram_ID) userData.instagramId = sheetData.Instagram_ID;\n\nreturn {\n  senderId: senderId,\n  message: `Welcome back ${userData.name}! What day would you like to book your haircut? (Format: YYYY-MM-DD)`,\n  stage: 'awaiting_date',\n  userData: userData,\n  existingClient: true\n};"
      },
      "id": "existing-client",
      "name": "Existing Client Flow",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 600]
    },
    {
      "parameters": {
        "jsCode": "// New client - ask for phone\nconst senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData;\n\nreturn {\n  senderId: senderId,\n  message: \"Please provide your phone number:\",\n  stage: 'awaiting_phone',\n  userData: userData,\n  existingClient: false\n};"
      },
      "id": "new-client",
      "name": "New Client - Ask Phone",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 800]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "awaiting_phone"
            }
          ]
        }
      },
      "id": "route-phone",
      "name": "Is Awaiting Phone?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 900]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData || {};\nconst messageText = $input.first().json.messageText;\n\nuserData.phone = messageText;\nuserData.instagramId = senderId;\n\nreturn {\n  senderId: senderId,\n  userData: userData,\n  stage: 'save_to_sheets'\n};"
      },
      "id": "process-phone",
      "name": "Process Phone",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 900]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $credentials.googleSheetsId }}",
          "mode": "list",
          "cachedResultName": "Clients Database"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ $json.userData.name }}",
            "Email": "={{ $json.userData.email }}",
            "Phone": "={{ $json.userData.phone }}",
            "Instagram_ID": "={{ $json.senderId }}",
            "Created_Date": "={{ $now.toISO() }}"
          }
        },
        "options": {}
      },
      "id": "add-to-sheets",
      "name": "Add Client to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1450, 900]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData;\n\nreturn {\n  senderId: senderId,\n  message: \"What day would you like to book your haircut? (Format: YYYY-MM-DD)\",\n  stage: 'awaiting_date',\n  userData: userData\n};"
      },
      "id": "ask-date",
      "name": "Ask for Date",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 900]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "awaiting_date"
            }
          ]
        }
      },
      "id": "route-date",
      "name": "Is Awaiting Date?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 1100]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData || {};\nconst messageText = $input.first().json.messageText;\n\nif (!messageText) {\n  return {\n    senderId: senderId,\n    message: \"We can't make an appointment without a date. Please provide a date:\",\n    stage: 'awaiting_date',\n    userData: userData,\n    valid: false\n  };\n}\n\nconst dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\nif (!dateRegex.test(messageText)) {\n  return {\n    senderId: senderId,\n    message: \"Please use the format YYYY-MM-DD (e.g., 2025-12-25):\",\n    stage: 'awaiting_date',\n    userData: userData,\n    valid: false\n  };\n}\n\nconst selectedDate = new Date(messageText);\nconst today = new Date();\ntoday.setHours(0, 0, 0, 0);\n\nif (selectedDate < today) {\n  return {\n    senderId: senderId,\n    message: \"Please select a future date:\",\n    stage: 'awaiting_date',\n    userData: userData,\n    valid: false\n  };\n}\n\nuserData.date = messageText;\n\nreturn {\n  senderId: senderId,\n  userData: userData,\n  date: messageText,\n  stage: 'checking_availability',\n  valid: true\n};"
      },
      "id": "validate-date",
      "name": "Validate Date",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 1100]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list",
          "cachedResultName": "Primary"
        },
        "start": "={{ $json.date }}T00:00:00",
        "end": "={{ $json.date }}T23:59:59",
        "returnAll": true,
        "options": {}
      },
      "id": "get-calendar-events",
      "name": "Get Calendar Events for Date",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 2,
      "position": [1450, 1100]
    },
    {
      "parameters": {
        "jsCode": "const events = $input.all();\nconst userData = $input.first().json.userData;\nconst senderId = $input.first().json.senderId;\nconst date = $input.first().json.date;\n\n// Business hours slots\nconst businessSlots = [\n  { start: '09:00', end: '10:00', id: 'slot_1', display: '09:00 - 10:00' },\n  { start: '12:00', end: '13:00', id: 'slot_2', display: '12:00 - 13:00' },\n  { start: '14:00', end: '15:00', id: 'slot_3', display: '14:00 - 15:00' },\n  { start: '16:00', end: '17:00', id: 'slot_4', display: '16:00 - 17:00' },\n  { start: '19:00', end: '20:00', id: 'slot_5', display: '19:00 - 20:00' }\n];\n\n// Get booked slots\nconst bookedTimes = events.map(event => {\n  if (!event.json.start) return null;\n  const startTime = event.json.start.dateTime || event.json.start.date;\n  const eventDate = new Date(startTime);\n  const hours = String(eventDate.getHours()).padStart(2, '0');\n  const minutes = String(eventDate.getMinutes()).padStart(2, '0');\n  return `${hours}:${minutes}`;\n}).filter(time => time !== null);\n\n// Filter available slots\nconst availableSlots = businessSlots.filter(slot => {\n  return !bookedTimes.includes(slot.start);\n});\n\nif (availableSlots.length === 0) {\n  return {\n    senderId: senderId,\n    message: \"Sorry, this day is fully booked. Please choose another date:\",\n    stage: 'awaiting_date',\n    userData: userData,\n    dayFull: true\n  };\n}\n\n// Create quick replies for available slots\nconst quickReplies = availableSlots.map(slot => ({\n  content_type: \"text\",\n  title: slot.display,\n  payload: slot.id\n}));\n\nuserData.availableSlots = availableSlots;\n\nreturn {\n  senderId: senderId,\n  userData: userData,\n  availableSlots: availableSlots,\n  quickReplies: quickReplies,\n  message: \"Available time slots for \" + date + \":\",\n  stage: 'showing_slots',\n  dayFull: false\n};"
      },
      "id": "calculate-slots",
      "name": "Calculate Available Slots",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 1100]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\"id\": \"{{ $json.senderId }}\"},\n  \"message\": {\n    \"text\": \"{{ $json.message }}\",\n    \"quick_replies\": {{ JSON.stringify($json.quickReplies || []) }}\n  }\n}",
        "options": {}
      },
      "id": "send-slots",
      "name": "Send Available Slots",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1850, 1100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.currentStage }}",
              "operation": "equals",
              "value2": "slot_selected"
            }
          ]
        }
      },
      "id": "route-slot",
      "name": "Slot Selected?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 1300]
    },
    {
      "parameters": {
        "jsCode": "const senderId = $input.first().json.senderId;\nconst userData = $input.first().json.userData;\nconst selectedSlotId = userData.selectedSlot;\n\n// Map slot IDs to times\nconst slotMapping = {\n  'slot_1': { start: '09:00', end: '10:00' },\n  'slot_2': { start: '12:00', end: '13:00' },\n  'slot_3': { start: '14:00', end: '15:00' },\n  'slot_4': { start: '16:00', end: '17:00' },\n  'slot_5': { start: '19:00', end: '20:00' }\n};\n\nconst selectedTime = slotMapping[selectedSlotId];\n\nif (!selectedTime) {\n  return {\n    senderId: senderId,\n    message: \"Invalid slot selected. Please try again.\",\n    stage: 'showing_slots',\n    userData: userData\n  };\n}\n\nuserData.startTime = selectedTime.start;\nuserData.endTime = selectedTime.end;\n\n// Create ISO datetime strings for Google Calendar\nconst startDateTime = `${userData.date}T${selectedTime.start}:00`;\nconst endDateTime = `${userData.date}T${selectedTime.end}:00`;\n\nreturn {\n  senderId: senderId,\n  userData: userData,\n  eventSummary: `Haircut - ${userData.name}`,\n  eventDescription: `Client: ${userData.name}\\nEmail: ${userData.email}\\nPhone: ${userData.phone}\\nInstagram ID: ${senderId}`,\n  startDateTime: startDateTime,\n  endDateTime: endDateTime,\n  stage: 'create_calendar_event'\n};"
      },
      "id": "prepare-calendar",
      "name": "Prepare Calendar Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 1300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list",
          "cachedResultName": "Primary"
        },
        "summary": "={{ $json.eventSummary }}",
        "start": "={{ $json.startDateTime }}",
        "end": "={{ $json.endDateTime }}",
        "additionalFields": {
          "description": "={{ $json.eventDescription }}"
        }
      },
      "id": "create-calendar-event",
      "name": "Create Google Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 2,
      "position": [1450, 1300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "={{ $credentials.googleSheetsId }}",
          "mode": "list",
          "cachedResultName": "Clients Database"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "list",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Last_Appointment": "={{ $json.userData.date }}",
            "Last_Appointment_Time": "={{ $json.userData.startTime }}"
          }
        },
        "options": {
          "lookupColumn": "Email",
          "lookupValue": "={{ $json.userData.email }}"
        }
      },
      "id": "update-sheets",
      "name": "Update Last Appointment in Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1650, 1300]
    },
    {
      "parameters": {
        "fromEmail": "={{ $credentials.smtpEmail }}",
        "toEmail": "={{ $json.userData.email }}",
        "subject": "Confirm Your Haircut Appointment",
        "emailType": "html",
        "message": "=<h2>Hi {{ $json.userData.name }},</h2>\n<p>Please confirm your appointment:</p>\n<ul>\n  <li><strong>Date:</strong> {{ $json.userData.date }}</li>\n  <li><strong>Time:</strong> {{ $json.userData.startTime }} - {{ $json.userData.endTime }}</li>\n</ul>\n<p>We look forward to seeing you!</p>\n<p>If you need to cancel or reschedule, please contact us.</p>",
        "options": {}
      },
      "id": "send-confirmation-email",
      "name": "Send Confirmation Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1850, 1300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\"id\": \"{{ $json.senderId }}\"},\n  \"message\": {\n    \"text\": \"‚úÖ Your booking is confirmed!\\n\\nDate: {{ $json.userData.date }}\\nTime: {{ $json.userData.startTime }} - {{ $json.userData.endTime }}\\n\\nA confirmation email has been sent to {{ $json.userData.email }}\\n\\nSee you soon! üëã\"\n  }\n}",
        "options": {}
      },
      "id": "send-final-confirmation",
      "name": "Send Final Confirmation DM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2050, 1300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "access_token",
              "value": "={{ $credentials.instagramAccessToken }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\": {\"id\": \"{{ $json.senderId }}\"},\n  \"message\": {\n    \"text\": \"{{ $json.message }}\"\n  }\n}",
        "options": {}
      },
      "id": "send-message",
      "name": "Send Message to Instagram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2050, 700]
    },
    {
      "parameters": {
        "operation": "upsert",
        "tableId": "conversation_states",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "sender_id",
              "fieldValue": "={{ $json.senderId }}"
            },
            {
              "fieldId": "state_data",
              "fieldValue": "={{ JSON.stringify({ stage: $json.stage, data: $json.userData }) }}"
            },
            {
              "fieldId": "updated_at",
              "fieldValue": "={{ $now.toISO() }}"
            }
          ]
        },
        "options": {
          "onConflict": "sender_id"
        }
      },
      "id": "save-state",
      "name": "Save Conversation State to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2250, 700]
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "conversation_states",
        "filterType": "manual",
        "matchType": "matchAll",
        "filtersUI": {
          "filterValues": [
            {
              "key": "sender_id",
              "condition": "equals",
              "value": "={{ $json.senderId }}"
            }
          ]
        }
      },
      "id": "clear-state",
      "name": "Clear Conversation State from Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2250, 1300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={ \"status\": \"success\" }",
        "options": {}
      },
      "id": "respond-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2450, 700]
    }
  ],
  "pinData": {},
  "connections": {
    "Instagram Webhook": {
      "main": [[{ "node": "Parse Instagram Data", "type": "main", "index": 0 }]]
    },
    "Parse Instagram Data": {
      "main": [[{ "node": "Get Conversation State from Supabase", "type": "main", "index": 0 }]]
    },
    "Get Conversation State from Supabase": {
      "main": [[{ "node": "Process State", "type": "main", "index": 0 }]]
    },
    "Process State": {
      "main": [[{ "node": "Is Initial?", "type": "main", "index": 0 }]]
    },
    "Is Initial?": {
      "main": [
        [{ "node": "Send Initial Message", "type": "main", "index": 0 }],
        [{ "node": "Is Chat Mode?", "type": "main", "index": 0 }]
      ]
    },
    "Send Initial Message": {
      "main": [[{ "node": "Save Initial State to Supabase", "type": "main", "index": 0 }]]
    },
    "Save Initial State to Supabase": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    },
    "Is Chat Mode?": {
      "main": [
        [{ "node": "Send Chat Mode Response", "type": "main", "index": 0 }],
        [{ "node": "Is Awaiting Name?", "type": "main", "index": 0 }]
      ]
    },
    "Send Chat Mode Response": {
      "main": [[{ "node": "Save Chat State to Supabase", "type": "main", "index": 0 }]]
    },
    "Save Chat State to Supabase": {
      "main": [[{ "node": "Notify Admin via Email", "type": "main", "index": 0 }]]
    },
    "Notify Admin via Email": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    },
    "Is Awaiting Name?": {
      "main": [
        [{ "node": "Process Name", "type": "main", "index": 0 }],
        [{ "node": "Is Awaiting Email?", "type": "main", "index": 0 }]
      ]
    },
    "Process Name": {
      "main": [[{ "node": "Send Message to Instagram", "type": "main", "index": 0 }]]
    },
    "Is Awaiting Email?": {
      "main": [
        [{ "node": "Validate Email", "type": "main", "index": 0 }],
        [{ "node": "Is Awaiting Phone?", "type": "main", "index": 0 }]
      ]
    },
    "Validate Email": {
      "main": [[{ "node": "Check Email in Google Sheets", "type": "main", "index": 0 }]]
    },
    "Check Email in Google Sheets": {
      "main": [[{ "node": "Email Exists?", "type": "main", "index": 0 }]]
    },
    "Email Exists?": {
      "main": [
        [{ "node": "Existing Client Flow", "type": "main", "index": 0 }],
        [{ "node": "New Client - Ask Phone", "type": "main", "index": 0 }]
      ]
    },
    "Existing Client Flow": {
      "main": [[{ "node": "Send Message to Instagram", "type": "main", "index": 0 }]]
    },
    "New Client - Ask Phone": {
      "main": [[{ "node": "Send Message to Instagram", "type": "main", "index": 0 }]]
    },
    "Is Awaiting Phone?": {
      "main": [
        [{ "node": "Process Phone", "type": "main", "index": 0 }],
        [{ "node": "Is Awaiting Date?", "type": "main", "index": 0 }]
      ]
    },
    "Process Phone": {
      "main": [[{ "node": "Add Client to Google Sheets", "type": "main", "index": 0 }]]
    },
    "Add Client to Google Sheets": {
      "main": [[{ "node": "Ask for Date", "type": "main", "index": 0 }]]
    },
    "Ask for Date": {
      "main": [[{ "node": "Send Message to Instagram", "type": "main", "index": 0 }]]
    },
    "Is Awaiting Date?": {
      "main": [
        [{ "node": "Validate Date", "type": "main", "index": 0 }]
      ]
    },
    "Validate Date": {
      "main": [[{ "node": "Get Calendar Events for Date", "type": "main", "index": 0 }]]
    },
    "Get Calendar Events for Date": {
      "main": [[{ "node": "Calculate Available Slots", "type": "main", "index": 0 }]]
    },
    "Calculate Available Slots": {
      "main": [[{ "node": "Send Available Slots", "type": "main", "index": 0 }]]
    },
    "Send Available Slots": {
      "main": [[{ "node": "Save Conversation State to Supabase", "type": "main", "index": 0 }]]
    },
    "Slot Selected?": {
      "main": [
        [{ "node": "Prepare Calendar Event", "type": "main", "index": 0 }]
      ]
    },
    "Prepare Calendar Event": {
      "main": [[{ "node": "Create Google Calendar Event", "type": "main", "index": 0 }]]
    },
    "Create Google Calendar Event": {
      "main": [[{ "node": "Update Last Appointment in Sheets", "type": "main", "index": 0 }]]
    },
    "Update Last Appointment in Sheets": {
      "main": [[{ "node": "Send Confirmation Email", "type": "main", "index": 0 }]]
    },
    "Send Confirmation Email": {
      "main": [[{ "node": "Send Final Confirmation DM", "type": "main", "index": 0 }]]
    },
    "Send Final Confirmation DM": {
      "main": [[{ "node": "Clear Conversation State from Supabase", "type": "main", "index": 0 }]]
    },
    "Clear Conversation State from Supabase": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    },
    "Send Message to Instagram": {
      "main": [[{ "node": "Save Conversation State to Supabase", "type": "main", "index": 0 }]]
    },
    "Save Conversation State to Supabase": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "id": "instagram-booking-main-supabase",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "tags": []
}